(self.webpackJsonp__wix_thunderbolt_app =
  self.webpackJsonp__wix_thunderbolt_app || []).push([
  [1232],
  {
    45189: function (e, t, i) {
      e.exports = i(10145);
    },
    10145: function (e, t) {
      !(function (e) {
        "use strict";
        e.stringify = function e(t) {
          function i(e) {
            return /[^\w-.]/.test(e)
              ? e.replace(/[^\w-.]/g, function (e) {
                  return "$" === e
                    ? "!"
                    : (e = e.charCodeAt(0)) < 256
                    ? "*" + ("00" + e.toString(16)).slice(-2)
                    : "**" + ("0000" + e.toString(16)).slice(-4);
                })
              : e;
          }
          var a;
          switch (typeof t) {
            case "number":
              return isFinite(t) ? "~" + t : "~null";
            case "boolean":
              return "~" + t;
            case "string":
              return "~'" + i(t);
            case "object":
              if (!t) return "~null";
              if (((a = []), Array.isArray(t))) {
                for (var o = 0; o < t.length; o++) a[o] = e(t[o]) || "~null";
                return "~(" + (a.join("") || "~") + ")";
              }
              for (var s in t)
                if (t.hasOwnProperty(s)) {
                  var n = e(t[s]);
                  n && a.push(i(s) + n);
                }
              return "~(" + a.join("~") + ")";
            default:
              return;
          }
        };
        var t = { true: !0, false: !1, null: null };
        (e.parse = function (e) {
          if (!e) return e;
          e = e.replace(/%(25)*27/g, "'");
          var i = 0,
            a = e.length;
          function o(t) {
            if (e.charAt(i) !== t)
              throw new Error(
                "bad JSURL syntax: expected " +
                  t +
                  ", got " +
                  (e && e.charAt(i))
              );
            i++;
          }
          function s() {
            for (
              var t, o = i, s = "";
              i < a && "~" !== (t = e.charAt(i)) && ")" !== t;

            )
              switch (t) {
                case "*":
                  o < i && (s += e.substring(o, i)),
                    "*" === e.charAt(i + 1)
                      ? ((s += String.fromCharCode(
                          parseInt(e.substring(i + 2, i + 6), 16)
                        )),
                        (o = i += 6))
                      : ((s += String.fromCharCode(
                          parseInt(e.substring(i + 1, i + 3), 16)
                        )),
                        (o = i += 3));
                  break;
                case "!":
                  o < i && (s += e.substring(o, i)), (s += "$"), (o = ++i);
                  break;
                default:
                  i++;
              }
            return s + e.substring(o, i);
          }
          return (function n() {
            var r, c, l;
            switch ((o("~"), (c = e.charAt(i)))) {
              case "(":
                if ((i++, "~" === e.charAt(i)))
                  if (((r = []), ")" === e.charAt(i + 1))) i++;
                  else
                    do {
                      r.push(n());
                    } while ("~" === e.charAt(i));
                else if (((r = {}), ")" !== e.charAt(i)))
                  do {
                    r[s()] = n();
                  } while ("~" === e.charAt(i) && ++i);
                o(")");
                break;
              case "'":
                i++, (r = s());
                break;
              default:
                for (l = i++; i < a && /[^)~]/.test(e.charAt(i)); ) i++;
                var u = e.substring(l, i);
                if (/[\d\-]/.test(c)) r = parseFloat(u);
                else if (void 0 === (r = t[u]))
                  throw new Error("bad value keyword: " + u);
            }
            return r;
          })();
        }),
          (e.tryParse = function (t, i) {
            try {
              return e.parse(t);
            } catch (e) {
              return i;
            }
          });
      })(t);
    },
    41253: function (e, t, i) {
      "use strict";
      i.r(t),
        i.d(t, {
          AUTH_RESULT_REASON: function () {
            return D.qd;
          },
          BIEvents: function () {
            return L;
          },
          INTERACTIONS: function () {
            return D.sH;
          },
          PrivacyStatus: function () {
            return Ce.lS;
          },
          PrivacyStatusStatus: function () {
            return N;
          },
          Role: function () {
            return I;
          },
          SiteMembersApiSymbol: function () {
            return v.Np;
          },
          Status: function () {
            return A;
          },
          isLoginAcceptableError: function () {
            return O.qi;
          },
          isSignupAcceptableError: function () {
            return O.NU;
          },
          memberDetailsFromDTO: function () {
            return O.Yv;
          },
          page: function () {
            return xe;
          },
          site: function () {
            return We;
          },
        });
      var a = i(77748),
        o = i(20590),
        s = i(32777),
        n = i(32166),
        r = i(87711),
        c = i(6623),
        l = i(9492),
        u = i(75396),
        d = i(10553),
        g = i(79435),
        m = i(39063),
        p = i(82658),
        h = i(46745),
        S = i(63386),
        b = i(71085),
        f = i(73896),
        C = i(45117),
        w = i(45156),
        E = i(45189),
        P = i.n(E);
      var y = i(62155),
        D = i(66397),
        v = i(19889);
      class _ {
        constructor(e, t, i, a, o) {
          (this.propsStore = e),
            (this.structureApi = t),
            (this.siteScrollBlocker = i),
            (this.browserWindow = a),
            (this.cyclicTabbing = o),
            (this.prevCompIds = []);
        }
        async displayDialog(e, t, i, a = {}, o) {
          const s = async () => {
              (0, p.fU)(this.browserWindow) ||
                (this.activeElementBeforeShowDialog =
                  this.browserWindow.document.activeElement);
              const a = (0, y.uniqueId)(v.RG);
              this.propsStore.update({ [a]: { ...t, ...i } }),
                this.currentCompId &&
                  this.cyclicTabbing.disableCyclicTabbing(this.currentCompId),
                this.cyclicTabbing.enableCyclicTabbing(a),
                await this.structureApi.addComponentToDynamicStructure(a, {
                  componentType: e,
                  components: [],
                }),
                this.currentCompId &&
                  (o
                    ? this.prevCompIds.push(this.currentCompId)
                    : (this.structureApi.removeComponentFromDynamicStructure(
                        this.currentCompId
                      ),
                      this.siteScrollBlocker.setSiteScrollingBlocked(
                        !1,
                        this.currentCompId
                      ))),
                this.siteScrollBlocker.setSiteScrollingBlocked(!0, a),
                (this.currentCompId = a);
            },
            { shouldWaitForAppDidMount: n, registerToAppDidMount: r } = a;
          n && r ? r(s) : await s();
        }
        hideDialog(e) {
          if (this.currentCompId) {
            if (
              (this.removeComponentFromDynamicStructure(this.currentCompId), e)
            )
              for (; this.prevCompIds.length > 0; )
                this.removeComponentFromDynamicStructure(
                  this.prevCompIds.pop()
                );
            this.currentCompId = this.prevCompIds.pop();
          }
          (0, p.fU)(this.browserWindow) ||
            (this.activeElementBeforeShowDialog?.focus(),
            (this.activeElementBeforeShowDialog = null));
        }
        removeComponentFromDynamicStructure(e) {
          this.structureApi.removeComponentFromDynamicStructure(e),
            this.siteScrollBlocker.setSiteScrollingBlocked(!1, e),
            this.cyclicTabbing.disableCyclicTabbing(e);
        }
      }
      var N, A, I;
      !(function (e) {
        (e.UNKNOWN = "UNKNOWN"), (e.PRIVATE = "PRIVATE"), (e.PUBLIC = "PUBLIC");
      })(N || (N = {})),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"),
            (e.PENDING = "PENDING"),
            (e.APPROVED = "APPROVED"),
            (e.BLOCKED = "BLOCKED"),
            (e.OFFLINE = "OFFLINE");
        })(A || (A = {})),
        (function (e) {
          (e.UNDEFINED_ROLE = "UNDEFINED_ROLE"),
            (e.MEMBER = "MEMBER"),
            (e.OWNER = "OWNER"),
            (e.CONTRIBUTOR = "CONTRIBUTOR");
        })(I || (I = {}));
      var O = i(65788),
        T = i(8145),
        R = i(98323);
      const L = ({
          sessionManager: e,
          businessLogger: t,
          wixBiSession: i,
          viewMode: a,
          language: o,
        }) => {
          const s = (t, s) => ({
            biToken: i.msId,
            context: t,
            ts: k(i),
            viewmode: a,
            visitor_id: e.getVisitorId(),
            site_member_id: e.getSiteMemberId(),
            vsi: i.viewerSessionId,
            site_settings_lng: o.siteLanguage,
            browser_lng: o.userLanguage,
            lng_mismatch: o.siteLanguage !== o.userLanguage,
            layout: s,
          });
          return {
            loginOrSignUpDialogLoaded: (e, i = "fullscreen") => {
              t.logger.log(
                { src: 5, evid: 658, ...s(e, i) },
                { endpoint: "site-members" }
              );
            },
            closingDialog: (e, i = "fullscreen") => {
              t.logger.log(
                { src: 5, evid: 602, form_type: "default", ...s(e, i) },
                { endpoint: "site-members" }
              );
            },
            emailAuthSubmitClicked: (e, i) => {
              t.logger.log(
                { src: 5, evid: 603, form_type: "default", ...s(e, i) },
                { endpoint: "site-members" }
              );
            },
            siteMembersFeatureLoaded: () => {
              t.logger.log(
                { src: 5, evid: 698, ...s() },
                { endpoint: "site-members" }
              );
            },
            siteMembersSdkFeatureLoaded: () => {
              t.logger.log(
                { src: 5, evid: 699, ...s() },
                { endpoint: "site-members" }
              );
            },
            siteMembersEmailConfirmationNewMembersModalLoad: () => {
              t.logger.log(
                { src: 5, evid: 1809, ...s() },
                { endpoint: "site-members" }
              );
            },
            siteMembersEmailConfirmationSendCodeClick: () => {
              t.logger.log(
                { src: 5, evid: 1810, ...s() },
                { endpoint: "site-members" }
              );
            },
            siteMembersEmailConfirmationOnResendCodeClick: () => {
              t.logger.log(
                { src: 5, evid: 1811, ...s() },
                { endpoint: "site-members" }
              );
            },
          };
        },
        k = (e) => {
          const t = e.initialTimestamp || 0;
          return Date.now() - t;
        },
        U = { isCloseable: !0, returnPages: !1 };
      class M {
        constructor(e, t) {
          (this.shouldRunCustomPopupCloseCallback = !0),
            (this.popups = e),
            (this.onReset = t),
            (this.config = U);
        }
        async openPopupPage(e, t) {
          const i = this.shouldRunCustomPopupCloseCallback;
          this.preventCustomPopupCloseCallback(),
            await this.popups?.open(e, () => {
              this.shouldRunCustomPopupCloseCallback &&
                (this.rejectAuthenticationRequest(), t && t());
            }),
            (this.shouldRunCustomPopupCloseCallback = i);
        }
        preventCustomPopupCloseCallback() {
          this.shouldRunCustomPopupCloseCallback = !1;
        }
        allowCustomPopupCloseCallback() {
          this.shouldRunCustomPopupCloseCallback = !0;
        }
        assignRequestAuthenticationRejection(e) {
          this.requestAuthenticationRejectInstance =
            this.requestAuthenticationRejectInstance || e;
        }
        assignRequestAuthenticationResolveInstance(e) {
          this.requestAuthenticationResolveInstance =
            this.requestAuthenticationResolveInstance || e;
        }
        assignRequestAuthenticationPromise(e, t) {
          (this.requestAuthenticationRejectInstance =
            this.requestAuthenticationRejectInstance || t),
            (this.requestAuthenticationResolveInstance =
              this.requestAuthenticationResolveInstance || e);
        }
        rejectAuthenticationRequest() {
          this.requestAuthenticationRejectInstance &&
            (this.requestAuthenticationRejectInstance(D.qd.CANCELED),
            this.reset());
        }
        resolveAuthenticationRequest(e) {
          this.requestAuthenticationRejectInstance &&
            (this.requestAuthenticationResolveInstance(e), this.reset());
        }
        setConfig({ isCloseable: e = !0, returnPages: t = !1 }) {
          this.config = { isCloseable: e, returnPages: t };
        }
        reset() {
          this.onReset?.(),
            (this.requestAuthenticationRejectInstance = void 0),
            (this.requestAuthenticationResolveInstance = void 0),
            (this.config = U);
        }
      }
      var V,
        B,
        F,
        q,
        W,
        x,
        $,
        H = i(15772),
        G = i(73699),
        j = {},
        K = { memberPrivacySettings: "_memberPrivacySettings" },
        J = { updatedDate: "google.protobuf.Timestamp" };
      function Y(e) {
        return (0, H.O2)(
          Object.assign(e, {
            domainToMappings: {
              "editor.wixapps.net": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "api._api_base_domain_": [
                { srcPath: "/members/v1/privacy-settings", destPath: "" },
              ],
              "manage._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "editor._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "blocks._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "create.editorx": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "www.wixapis.com": [
                {
                  srcPath: "/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              _: [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "www._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "*.dev.wix-code.com": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "bo._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "wixbo.ai": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "apps._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
            },
          })
        );
      }
      !(function (e) {
        (e.UNKNOWN = "UNKNOWN"),
          (e.VISIBLE_TO_MEMBERS_ONLY = "VISIBLE_TO_MEMBERS_ONLY"),
          (e.VISIBLE_TO_ALL = "VISIBLE_TO_ALL");
      })(V || (V = {})),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"), (e.NO_ONE = "NO_ONE"), (e.ANYONE = "ANYONE");
        })(B || (B = {})),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"),
            (e.ENABLED = "ENABLED"),
            (e.DISABLED = "DISABLED"),
            (e.PENDING = "PENDING"),
            (e.DEMO = "DEMO");
        })(F || (F = {})),
        (function (e) {
          (e.OTHER = "OTHER"),
            (e.FROM_TEMPLATE = "FROM_TEMPLATE"),
            (e.DUPLICATE_BY_SITE_TRANSFER = "DUPLICATE_BY_SITE_TRANSFER"),
            (e.DUPLICATE = "DUPLICATE"),
            (e.OLD_SITE_TRANSFER = "OLD_SITE_TRANSFER"),
            (e.FLASH = "FLASH");
        })(q || (q = {})),
        (function (e) {
          (e.UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE"),
            (e.WIX = "WIX"),
            (e.SHOUT_OUT = "SHOUT_OUT"),
            (e.ALBUMS = "ALBUMS"),
            (e.WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE"),
            (e.HOTELS = "HOTELS"),
            (e.CLUBS = "CLUBS"),
            (e.ONBOARDING_DRAFT = "ONBOARDING_DRAFT"),
            (e.DEV_SITE = "DEV_SITE"),
            (e.LOGOS = "LOGOS"),
            (e.VIDEO_MAKER = "VIDEO_MAKER"),
            (e.PARTNER_DASHBOARD = "PARTNER_DASHBOARD"),
            (e.DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY"),
            (e.HTML_DRAFT = "HTML_DRAFT"),
            (e.SITELESS_BUSINESS = "SITELESS_BUSINESS"),
            (e.CREATOR_ECONOMY = "CREATOR_ECONOMY"),
            (e.DASHBOARD_FIRST = "DASHBOARD_FIRST"),
            (e.ANYWHERE = "ANYWHERE"),
            (e.HEADLESS = "HEADLESS"),
            (e.ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS"),
            (e.RISE = "RISE"),
            (e.BRANDED_FIRST = "BRANDED_FIRST");
        })(W || (W = {})),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"),
            (e.TRASH = "TRASH"),
            (e.DELETED = "DELETED"),
            (e.PENDING_PURGE = "PENDING_PURGE");
        })(x || (x = {})),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"),
            (e.ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR"),
            (e.MEMBER = "MEMBER"),
            (e.WIX_USER = "WIX_USER"),
            (e.APP = "APP");
        })($ || ($ = {}));
      const z = (e) => {
          const t = e.joinCommunityCheckedByDefault ?? !0,
            i = e.privacyNoteType ?? "CHECKBOX";
          return t ? i : "CHECKBOX";
        },
        X = (e) => "NOTE" === z(e) || (e.joinCommunityCheckedByDefault ?? !0),
        Q = async (e, t) => {
          const { data: i } = await e.request(
            (function (e) {
              var t = (0, G.d)(j, {}),
                i = t.toJSON,
                a = t.fromJSON,
                o = (0, G.d)(K, { _memberPrivacySettings: J }).fromJSON;
              function s(t) {
                var a = t.host,
                  s = i(e);
                return {
                  entityFqdn: "wix.members.v1.member_privacy_settings",
                  method: "GET",
                  methodFqn:
                    "com.wixpress.members.memberprivacysettings.MemberPrivacySettingsService.GetMemberPrivacySettings",
                  url: Y({
                    protoPath: "/v1/privacy-settings",
                    data: s,
                    host: a,
                  }),
                  params: (0, H.bU)(s),
                  transformResponse: o,
                };
              }
              return (s.fromReq = a), (s.__isAmbassador = !0), s;
            })({}),
            { signedInstance: t }
          );
          return i.memberPrivacySettings;
        },
        Z = { [A.APPROVED]: "ACTIVE", [A.PENDING]: "PENDING" };
      var ee = i(85583),
        te = {
          numValue: "DOUBLE",
          dateValue: "google.protobuf.Timestamp",
          listValue: "_commonListValue",
          mapValue: "_commonMapValue",
        },
        ie = { value: "_commonCustomValue" },
        ae = { value: "Map#_commonCustomValue" },
        oe = { value: "_customValue" },
        se = {
          numValue: "DOUBLE",
          dateValue: "google.protobuf.Timestamp",
          listValue: "_listValue",
          mapValue: "_mapValue",
        },
        ne = {
          createdDate: "google.protobuf.Timestamp",
          updatedDate: "google.protobuf.Timestamp",
          identityProfile: "_identityProfile",
        },
        re = { customFields: "_customField" },
        ce = { value: "_customValue" },
        le = {},
        ue = {},
        de = { value: "Map#_customValue" },
        ge = { body: "BYTES" },
        me = { profile: "_identityProfile" },
        pe = {
          identity: "_identity",
          additionalData: "Map#_commonCustomValue",
        };
      function he(e) {
        return (0, H.O2)(
          Object.assign(e, {
            domainToMappings: {
              _: [{ srcPath: "/_api/iam/authentication", destPath: "" }],
              "users._base_domain_": [
                {
                  srcPath: "/iam/wix/google",
                  destPath:
                    "/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69",
                },
                { srcPath: "/authentication", destPath: "" },
              ],
              "www.wixapis.com": [
                { srcPath: "/_api/iam/authentication", destPath: "" },
              ],
              "bo._base_domain_": [
                { srcPath: "/_api/iam/authentication", destPath: "" },
              ],
              "wixbo.ai": [
                { srcPath: "/_api/iam/authentication", destPath: "" },
              ],
              "dev._base_domain_": [
                { srcPath: "/_api/iam/authentication", destPath: "" },
              ],
              "manage._base_domain_": [
                { srcPath: "/_api/authentication", destPath: "" },
              ],
              "www._base_domain_": [
                { srcPath: "/_api/iam/authentication", destPath: "" },
              ],
            },
          })
        );
      }
      var Se = {},
        be = { body: "BYTES" };
      function fe(e) {
        return (0, H.O2)(
          Object.assign(e, {
            domainToMappings: {
              "manage._base_domain_": [
                { srcPath: "/_api/cookie", destPath: "" },
              ],
              _: [{ srcPath: "/_api/iam/cookie", destPath: "" }],
              "bo._base_domain_": [
                { srcPath: "/_api/iam/cookie", destPath: "" },
              ],
              "wixbo.ai": [{ srcPath: "/_api/iam/cookie", destPath: "" }],
              "www._base_domain_": [
                { srcPath: "/_api/iam/cookie", destPath: "" },
              ],
              "dev._base_domain_": [
                { srcPath: "/_api/iam/cookie", destPath: "" },
              ],
            },
          })
        );
      }
      var Ce = i(82884),
        we = {
          numValue: "DOUBLE",
          dateValue: "google.protobuf.Timestamp",
          listValue: "_commonListValue",
          mapValue: "_commonMapValue",
        },
        Ee = { value: "_commonCustomValue" },
        Pe = { value: "Map#_commonCustomValue" },
        ye = { value: "_customValue" },
        De = {
          numValue: "DOUBLE",
          dateValue: "google.protobuf.Timestamp",
          listValue: "_listValue",
          mapValue: "_mapValue",
        },
        ve = {
          createdDate: "google.protobuf.Timestamp",
          updatedDate: "google.protobuf.Timestamp",
          identityProfile: "_identityProfile",
        },
        _e = { customFields: "_customField" },
        Ne = { value: "_customValue" },
        Ae = { value: "Map#_customValue" },
        Ie = {
          identity: "_identity",
          additionalData: "Map#_commonCustomValue",
        },
        Oe = {};
      function Te(e) {
        return (0, H.O2)(
          Object.assign(e, {
            domainToMappings: {
              "www.wixapis.com": [
                { srcPath: "/_api/iam/verification", destPath: "" },
              ],
              _: [{ srcPath: "/_api/iam/verification", destPath: "" }],
              "www._base_domain_": [
                { srcPath: "/_api/iam/verification", destPath: "" },
              ],
            },
          })
        );
      }
      function Re(e) {
        var t = (0, G.d)(Oe, {}),
          i = t.toJSON,
          a = t.fromJSON,
          o = (0, G.d)(Ie, {
            _commonCustomValue: we,
            _commonListValue: Ee,
            _commonMapValue: Pe,
            _customField: ye,
            _customValue: De,
            _identity: ve,
            _identityProfile: _e,
            _listValue: Ne,
            _mapValue: Ae,
          }).fromJSON;
        function s(t) {
          var a = t.host,
            s = i(e);
          return {
            entityFqdn: "wix.iam.verification.v1.start_response",
            method: "POST",
            methodFqn:
              "wix.iam.verification.v1.VerificationService.VerifyDuringAuthentication",
            url: Te({ protoPath: "/v1/auth/verify", data: s, host: a }),
            data: s,
            transformResponse: o,
          };
        }
        return (s.fromReq = a), (s.__isAmbassador = !0), s;
      }
      const Le = (e, t, i) => {
          (document.cookie = `${e}=;max-age=0`),
            (document.cookie = `${e}=;max-age=0;path=${t}`),
            (document.cookie = `${e}=;domain=${i};max-age=0`),
            (document.cookie = `${e}=;domain=${i};max-age=0;path=${t}`);
        },
        ke = (0, a.Og)(
          [
            (0, a.KT)(o.YG, v.UU),
            (0, a.KT)(o._K, v.UU),
            (0, a.KT)(o.wk, v.UU),
            (0, a.KT)(o.AF, v.UU),
            s.F,
            n.Ht,
            n.TQ,
            S.i$,
            r.Ji,
            r.eZ,
            n.dn,
            n.RV,
            b.Ix,
            (0, a.lq)(f.j),
            b.$1,
            c.F,
            l.O$,
            (0, a.lq)(C.KK),
            (0, a.lq)(w.i),
            u.t7,
            d.n,
            (0, a.lq)(g.Z),
            (0, a.lq)(R.j),
            (0, a.lq)(T.U),
          ],
          (
            e,
            t,
            i,
            a,
            o,
            s,
            n,
            r,
            c,
            l,
            u,
            d,
            g,
            S,
            b,
            f,
            C,
            w,
            E = { trackEvent: () => 0 },
            v,
            N,
            A,
            T,
            R
          ) => {
            const k = (0, m.o)(),
              {
                loginSocialBarOnSite: U,
                protectedHomepage: V,
                smSessionCookie: F,
                memberInfoAppId: q,
                membersInfoAppDefId: W,
                smcollectionId: x,
                isTemplate: $,
              } = e;
            let { sm_efCookie: j } = e;
            const K = "22bef345-3c5b-4c18-b782-74d4085112ff",
              J = r.getUserSession(),
              Y = () => r.getAppInstanceByAppDefId(K) || "",
              we = () => (0, O.YA)(r),
              Ee = N["specs.thunderbolt.deprecateAppId"],
              Pe = N["specs.ident.usePlatformizedSMAuth"],
              {
                smSettings: ye,
                tpaAppDefinitionIds: De,
                tpaApplicationIds: ve,
                tpaPageIds: _e,
                policyLinks: Ne,
                translations: Ae,
              } = t,
              Ie = Ee ? De[W] : q && ve[q],
              {
                metaSiteId: Oe,
                externalBaseUrl: Te,
                siteId: ke,
                siteRevision: Ue,
              } = n.site,
              Me = n.requestUrl,
              Ve = n.viewMode,
              Be = n.anywhereConfig?.siteId ?? ke,
              Fe = n.anywhereConfig?.revision ?? Ue,
              qe =
                -1 !==
                D.UG.findIndex((e) => d?.navigator?.userAgent?.includes(e)),
              We = !qe,
              xe = !qe,
              $e = `/_api/wix-sm-webapp/tokens/verify/${Oe}/${Be}`,
              He = `${Te.replace(
                /\/$/,
                ""
              )}/api/wix-sm/v1/authorize/${Be}/pages`,
              Ge = `/_api/wix-sm-webapp/tokens/logout/${Oe}`,
              je = `/_api/wix-sm-webapp/member/changePasswordWithMailToken?metaSiteId=${Oe}&collectionId=${x}`,
              Ke = "/_api/iam/state-machine-service",
              Je = ye.smFirstDialogLogin ? "login" : "signup",
              {
                socialLoginFacebookEnabled: Ye,
                socialLoginGoogleEnabled: ze,
                termsOfUse: Xe,
                privacyPolicy: Qe,
                codeOfConduct: Ze,
                customSignUpPageId: et,
                customSignInPageId: tt,
              } = ye,
              { privacyNoteType: it, joinCommunityCheckedByDefault: at } = ((
                e
              ) => ({
                privacyNoteType: z(e),
                joinCommunityCheckedByDefault: X(e),
              }))(ye);
            let { smToken: ot } = e,
              st = {},
              nt = F,
              rt = null,
              ct = !1;
            const lt = (e) => {
                rt = e;
              },
              ut = () => ({
                registerToAppDidMount: lt,
                shouldWaitForAppDidMount: !ct,
              }),
              dt = async () => {
                if (N["specs.thunderbolt.getMemberDetailsFromMembersNg"]) {
                  const { member: e } = await St(
                      "/_api/members/v1/members/my?fieldsets=FULL",
                      {
                        headers: {
                          authorization: r.getAppInstanceByAppDefId(K) ?? "",
                        },
                      }
                    ),
                    { role: t } = await (0, O.hv)(
                      () =>
                        St(`/api/wix-sm/v1/members/${e?.id}/role`, {
                          headers: {
                            authorization: r.getAppInstanceByAppDefId(K) ?? "",
                          },
                        }),
                      () => ({ role: I.MEMBER })
                    );
                  return (({ member: e, role: t }) => {
                    return {
                      id: e?.id ?? "",
                      contactId: e?.contactId ?? "",
                      loginEmail: e?.loginEmail ?? "",
                      imageUrl: e?.profile?.photo?.url ?? "",
                      nickname: e?.profile?.nickname ?? "",
                      profilePrivacyStatus: e?.privacyStatus ?? "",
                      slug: e?.profile?.slug ?? "",
                      status:
                        ((a = e?.status),
                        a ? Z[a] ?? "APPLICANT" : "APPLICANT"),
                      creationDate: e?.createdDate ?? "",
                      lastUpdateDate: e?.updatedDate ?? "",
                      lastLoginDate: e?.lastLoginDate ?? "",
                      emailVerified: e?.loginEmailVerified ?? !1,
                      role: t ?? "MEMBER",
                      owner: t === I.OWNER,
                      firstName: e?.contact?.firstName ?? "",
                      lastName: e?.contact?.lastName ?? "",
                      memberName:
                        ((i = e?.contact),
                        `${i?.firstName ?? ""} ${i?.lastName ?? ""}`.trim()),
                      groups: void 0,
                      emails: void 0,
                      phones: void 0,
                      addresses: void 0,
                      labels: void 0,
                      customFields: void 0,
                    };
                    var i, a;
                  })({ member: e, role: t });
                }
                const e = `/_api/wix-sm-webapp/member/${ot}?collectionId=${x}&metaSiteId=${Oe}`,
                  { payload: t } = await St(e);
                return (0, O.Yv)(t);
              },
              gt = {},
              mt = {},
              pt = L({
                sessionManager: r,
                businessLogger: f,
                wixBiSession: C,
                viewMode: Ve?.toUpperCase(),
                language: u,
              });
            pt.siteMembersFeatureLoaded();
            const ht = {},
              St = (0, O.I5)(
                o,
                {
                  credentials: "same-origin",
                  headers: {
                    accept: "application/json",
                    "x-wix-site-revision": `${Fe}`,
                    "x-wix-client-artifact-id": "thunderbolt",
                  },
                },
                Me
              ),
              bt = (0, ee.u)({ isSSR: !1 }),
              ft = ((e, t) => {
                let i;
                return {
                  canHavePublicMembers: async () =>
                    i ||
                    ((i = new Promise(async (i) => {
                      const a = await Q(e, t()),
                        o = a?.publicMemberCandidates;
                      i(o === B.ANYONE);
                    })),
                    i),
                };
              })(bt, Y),
              Ct = ((e, t, i, a, o) => new _(e, t, i, a, o))(c, l, S, d, T),
              wt = new URL(Me).searchParams,
              Et = {};
            wt.forEach((e, t) => {
              Et[t] = e;
            });
            const Pt = ((e) => {
                let { query: t } = e;
                const i =
                  P().tryParse(
                    null == t ? void 0 : t.headlessExternalUrls,
                    {}
                  ) ?? {};
                return null == i ? void 0 : i.headlessClientId;
              })({ query: Et }),
              yt = ((e, t, i, a, o, s) => {
                let n;
                const r =
                    "/_serverless/collection-settings-facade/get-settings",
                  c = async () =>
                    n ||
                    e(s ? `${r}?clientId=${s}` : r, {
                      headers: {
                        "Content-Type": "application/json",
                        authorization: o(),
                      },
                      credentials: "omit",
                    }).then((e) => ((n = e), n)),
                  l = async () => c().then((e) => e.collectionSettings);
                return {
                  getSiteMembersSettings: l,
                  getCaptchaSettings: () =>
                    l()
                      .then(O.YG)
                      .catch(
                        (e) => (
                          t.captureError(e, {
                            tags: { feature: "site-members" },
                          }),
                          i.trackEvent((0, D.SU)(D.WW.ACTIONS.SETTINGS.FAIL)),
                          {
                            invisible: { login: !1, signup: !1 },
                            visible: { login: !1, signup: !0 },
                          }
                        )
                      ),
                  getEnabledConnections: (e) =>
                    c().then(
                      (t) =>
                        t.enabledConnections.filter(
                          ({ appDefId: t }) => !1 !== e[t]
                        ) ?? []
                    ),
                  getLoginRedirectUrl: () => c().then((e) => e.loginUrl),
                  getLogoutRedirectUrl: () => c().then((e) => e.logoutUrl),
                };
              })(St, s, E, 0, () => Y(), Pt),
              Dt = (0, O.bR)(d),
              vt = (0, O.Ed)(d, k),
              _t = new M(w, async () => {
                const e = await yt.getCaptchaSettings();
                (e.invisible.login || e.invisible.signup) &&
                  vt.hideCaptchaBadge();
              }),
              Nt = R?.getBsi(),
              At = Nt
                ? Nt.split("|")[0]
                : "00000000-0000-0000-0000-000000000000",
              It = (e) => {
                s.interactionStarted(D.sH.SOCIAL_APP_LOGIN_WITH_VENDOR(e));
              },
              Ot = {
                appDidMount() {
                  rt && rt(), (ct = !0);
                },
                async handleSocialLoginResponse(e, t, i = !1) {
                  const a = D.UI[t] ?? t;
                  s.interactionStarted(D.sH.SOCIAL_APP_LOGIN),
                    s.interactionEnded(D.sH.SOCIAL_APP_LOGIN),
                    s.interactionEnded(D.sH.SOCIAL_APP_LOGIN_WITH_VENDOR(a)),
                    E.trackEvent((0, D.SU)(D.WW.ACTIONS.LOGIN.SUBMIT, a)),
                    N["specs.thunderbolt.useNewPostLoginRedirect"] ||
                      (0, O._y)(d, Me, {});
                  const o = await Ot.handleIAMLoginResponseV1(e, i);
                  return (
                    E.trackEvent((0, D.SU)(D.WW.ACTIONS.LOGIN.SUCCESS, a)), o
                  );
                },
                async handleIAMLoginResponseV1(t, i = !1) {
                  if (t.identity?.status?.name === Ce.EH.PENDING) {
                    if (Pe) {
                      const t = _e[D.$m.ADMIN_APPROVAL];
                      if (t)
                        throw (
                          (_t.rejectAuthenticationRequest(),
                          await g.navigate(e.routes[t]),
                          new Error(D.qd.CANCELED))
                        );
                    }
                    return Ot.showAdminApprovalDialog(
                      t.identity.email?.address ?? ""
                    );
                  }
                  const a = (0, O.N3)(t),
                    o = t.sessionToken,
                    s = (0, O.FB)(t.additionalData?.protectedPages);
                  if (
                    (0, O._y)(d, Me, { sessionToken: o }) &&
                    N["specs.thunderbolt.useNewPostLoginRedirect"]
                  )
                    return (0, O.yw)();
                  const n = await Ot.applySessionToken(o, a, i && !s);
                  return {
                    sessionToken: o,
                    member: a,
                    ...(i ? { pages: s ?? n } : {}),
                  };
                },
                async promptLogin(
                  e = {},
                  t = _t.config?.isCloseable ?? !0,
                  i = _t.config?.returnPages ?? !1
                ) {
                  const { mode: a, modal: o } = e,
                    s = "login" === (a ?? Je),
                    n = o ? "popup" : "fullscreen";
                  return $
                    ? (await Ot.showNotificationDialog(
                        Ae.templateNotificationTitle,
                        Ae.templateNotificationMessage,
                        Ae.containerOk
                      ),
                      Promise.reject(D.qd.CANCELED))
                    : (vt.loadScript(u.userLanguage, D.c8),
                      s
                        ? Ot.showLoginDialog({
                            isCloseable: t,
                            displayMode: n,
                            returnPages: i,
                          })
                        : Ot.showSignUpDialog({
                            isCloseable: t,
                            displayMode: n,
                            returnPages: i,
                          }));
                },
                promptForgotPassword(t = !0) {
                  return new Promise((i, a) => {
                    _t.assignRequestAuthenticationPromise(i, a);
                    const o = {
                        isCloseable: t,
                        directionByLanguage: u.directionByLanguage,
                        translations: Ae,
                      },
                      s = {
                        async onCloseDialogCallback() {
                          (0, O.Fy)(Me, d),
                            pt.closingDialog("RequestResetPassword"),
                            Ct.hideDialog(),
                            _t.rejectAuthenticationRequest();
                        },
                        onSubmitCallback(e) {
                          return Ot.sendForgotPasswordMail(e).then(async () => {
                            const e = () => {
                              (0, O.Fy)(Me, d),
                                _t.resolveAuthenticationRequest(),
                                a(D.qd.CANCELED);
                            };
                            Ot.showNotificationDialog(
                              Ae.resetPasswordCheckEmailTitle,
                              Ae.resetPasswordCheckEmailText,
                              Ae.resetPasswordOk,
                              e,
                              e
                            );
                          });
                        },
                      },
                      n = ut();
                    if (Pe) {
                      const t = _e[D.$m.FORGOT_PASSWORD];
                      if (t) return g.navigate(e.routes[t]);
                    }
                    Ct.displayDialog("RequestPasswordResetDialog", o, s, n);
                  });
                },
                async requestAuthentication(e = {}) {
                  if (nt)
                    return {
                      success: !0,
                      token: nt,
                      reason: D.qd.ALREADY_LOGGED_IN,
                    };
                  try {
                    const t = !V,
                      { sessionToken: i } = await Ot.promptLogin(e, t);
                    return { success: !0, token: i, reason: D.qd.SUCCESS };
                  } catch (e) {
                    return { success: !1, reason: e };
                  }
                },
                async requestAuthorizedPages(e = {}) {
                  if (ot) {
                    return {
                      success: !0,
                      pages: await Ot.authorizeMemberPagesBySignedInstance(Y()),
                    };
                  }
                  try {
                    const t = !V;
                    _t.setConfig({ isCloseable: t, returnPages: !0 });
                    const i = await Ot.promptLogin(e, t, !0);
                    return _t.reset(), { success: !0, pages: i.pages };
                  } catch (e) {
                    return { success: !1, reason: e };
                  }
                },
                async applySessionToken(e, t, i = !1) {
                  if ((0, p.fU)(d)) throw D.Nw;
                  s.interactionStarted(D.sH.VERIFY_TOKEN);
                  const o = await bt
                    .request(
                      (function (e) {
                        var t = (0, G.d)(Se, {}),
                          i = t.toJSON,
                          a = t.fromJSON,
                          o = (0, G.d)(be, {}).fromJSON;
                        function s(t) {
                          var a = t.host,
                            s = i(e);
                          return {
                            entityFqdn: "wix.iam.cookie.v1.cookie",
                            method: "POST",
                            methodFqn:
                              "wix.iam.cookie.v1.CookieService.CreateSessionCookie",
                            url: fe({
                              protoPath: "/v1/createSessionCookie",
                              data: s,
                              host: a,
                            }),
                            data: s,
                            transformResponse: o,
                            fallback: [
                              {
                                method: "POST",
                                url: fe({
                                  protoPath: "/v1/createSessionCookie",
                                  data: s,
                                  host: a,
                                }),
                                data: s,
                              },
                            ],
                          };
                        }
                        return (s.fromReq = a), (s.__isAmbassador = !0), s;
                      })({ sessionToken: e, protectedPages: i }),
                      { signedInstance: Y() }
                    )
                    .then((e) => e.data)
                    .catch((e) => {
                      throw e.response?.data ?? e;
                    });
                  var n;
                  if (
                    (s.interactionEnded(D.sH.VERIFY_TOKEN),
                    await r.loadNewSession({ reason: "memberLogin" }),
                    (ot = r.getSmToken()),
                    (nt = e),
                    (st = t ?? (await Ot.getMemberDetails())),
                    await ((n = st),
                    Promise.all(
                      Object.entries(gt).map(async ([e, t]) => {
                        try {
                          if (
                            "$$$timeout$$$" ===
                            (await Promise.race([
                              t(n),
                              (0, O.yy)(3e3).then(() => "$$$timeout$$$"),
                            ]))
                          )
                            throw new Error(`callback ${e} timed out`);
                        } catch (e) {
                          s.captureError(e, {
                            tags: { feature: "site-members" },
                          });
                        }
                      })
                    )),
                    a.export({ memberDetails: st }),
                    i)
                  ) {
                    return (0, O.FB)(o?.protectedPages);
                  }
                },
                async authorizeMemberPagesByCookie() {
                  const e = (0, p.fU)(d)
                      ? { headers: { cookie: `smSession=${F}` } }
                      : void 0,
                    { authorizedPages: t } = await St(He, e);
                  return t;
                },
                async authorizeMemberPagesByToken(e) {
                  if (e === F) return this.authorizeMemberPagesByCookie();
                  const { payload: t } = await St($e, {
                      method: "POST",
                      body: `token=${e}`,
                    }),
                    { pages: i } = t;
                  return i;
                },
                async authorizeMemberPagesBySignedInstance(e) {
                  const t = { headers: { authorization: e } },
                    { authorizedPages: i } = await St(He, t);
                  return i;
                },
                async getMemberDetails(e = !1) {
                  return st.id && !e
                    ? st
                    : ot
                    ? ((st = await dt()),
                      a.export({ memberDetails: st }),
                      e &&
                        (await ((t = st),
                        Promise.all(
                          Object.values(ht).map(async (e) => {
                            try {
                              await e(t);
                            } catch (e) {
                              s.captureError(e, {
                                tags: { feature: "site-members" },
                              });
                            }
                          })
                        ))),
                      st)
                    : null;
                  var t;
                },
                async sendForgotPasswordMail(e) {
                  s.interactionStarted(D.sH.RESET_PASSWORD);
                  const t = u.userLanguage,
                    i = { url: (0, O.g9)(Me) ?? Me },
                    a = JSON.stringify({ language: t, email: e, redirect: i }),
                    o = {
                      "Content-Type": "application/json",
                      authorization: Y(),
                    };
                  await St("/_api/iam/recovery/v1/send-email", {
                    headers: o,
                    method: "POST",
                    body: a,
                  }),
                    s.interactionEnded(D.sH.RESET_PASSWORD);
                },
                async sendSetPasswordEmail(e, t) {
                  const i = await St(
                    "/_api/wix-sm-webapp/members/v1/auth/members/send-set-password-email",
                    {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/json",
                        authorization: Y(),
                      },
                      body: JSON.stringify({
                        email: e,
                        ...(t?.hideIgnoreMessage
                          ? { hideIgnoreMessage: t.hideIgnoreMessage }
                          : {}),
                      }),
                    }
                  );
                  return !!i?.accepted;
                },
                async changePassword(e, t) {
                  const a = encodeURIComponent(e),
                    o = t ?? i.get().resetPasswordToken,
                    s = o.startsWith(D.Zq),
                    n = s ? "/_api/iam/recovery/v1/recover" : je,
                    r = s
                      ? JSON.stringify({ password: e, recovery_token: o })
                      : `newPassword=${a}&forgotPasswordToken=${o}`,
                    c = s
                      ? {
                          "Content-Type": "application/json",
                          authorization: Y(),
                        }
                      : void 0;
                  await St(n, { method: "POST", headers: c, body: r });
                },
                async sendEmailVerification(e) {
                  return this.resendEmailVerification(e);
                },
                async resendEmailVerification(e) {
                  await St(`/_api/wix-sm-webapp/tokens/email/resend/${e}`);
                },
                async logout(e) {
                  if (!ot) return !1;
                  if (
                    (N["specs.thunderbolt.logoutOnIAM"]
                      ? await bt
                          .request(
                            (function (e) {
                              var t = (0, G.d)(ue, {}),
                                i = t.toJSON,
                                a = t.fromJSON,
                                o = (0, G.d)(ge, {}).fromJSON;
                              function s(t) {
                                var a = t.host,
                                  s = i(e);
                                return {
                                  entityFqdn:
                                    "wix.iam.authentication.v1.authentication",
                                  method: "GET",
                                  methodFqn:
                                    "wix.iam.authentication.v1.AuthenticationService.Logout",
                                  url: he({
                                    protoPath: "/v1/logout",
                                    data: s,
                                    host: a,
                                  }),
                                  params: (0, H.bU)(s),
                                  transformResponse: o,
                                };
                              }
                              return (
                                (s.fromReq = a), (s.__isAmbassador = !0), s
                              );
                            })({}),
                            { signedInstance: Y() }
                          )
                          .catch(() => {
                            E.trackEvent((0, D.SU)(D.WW.ACTIONS.LOGOUT.FAIL));
                          })
                      : await St(Ge, { method: "POST" }).catch(() => {
                          E.trackEvent((0, D.SU)(D.WW.ACTIONS.LOGOUT.FAIL));
                        }),
                    await Promise.all(
                      Object.entries(mt).map(async ([e, t]) => {
                        try {
                          if (
                            "$$$timeout$$$" ===
                            (await Promise.race([
                              t(),
                              (0, O.yy)(3e3).then(() => "$$$timeout$$$"),
                            ]))
                          )
                            throw new Error(`callback ${e} timed out`);
                        } catch (e) {
                          s.captureError(e, {
                            tags: { feature: "site-members" },
                          });
                        }
                      })
                    ),
                    e)
                  ) {
                    const t = `./${e.replace(/^\//, "")}`;
                    await g.navigate(t);
                  }
                  const t = await Ot.getLogoutUrl();
                  return (
                    t
                      ? d?.location.replace(t)
                      : (0, p.fU)(d) || d.document.location.reload(),
                    !(!e && !t)
                  );
                },
                registerToUserLogin(e, t = (0, y.uniqueId)("callback")) {
                  return (gt[t] = e), t;
                },
                unRegisterToUserLogin(e) {
                  delete gt[e];
                },
                registerToMemberLogout(e) {
                  const t = (0, y.uniqueId)("logout_callback");
                  return (mt[t] = e), t;
                },
                unRegisterToMemberLogout(e) {
                  delete mt[e];
                },
                registerToMemberDetailsRefresh(e) {
                  const t = (0, y.uniqueId)("mdrcb");
                  return (ht[t] = e), t;
                },
                unRegisterToMemberDetailsRefresh(e) {
                  delete ht[e];
                },
                async showWelcomeDialog(e = !0) {
                  const t = { isCloseable: e, translations: Ae },
                    i = b.getParsedUrl(),
                    a = {
                      onCloseDialogCallback() {
                        (0, O.Fy)(Me, d), pt.closingDialog("WelcomeDialog");
                        const e = new URL(Me).hostname,
                          t = 0 === e.indexOf("www") ? e.substr(3) : e;
                        Le("sm_ef", "/", t),
                          (j = ""),
                          Ct.hideDialog(),
                          g.navigate(i.href);
                      },
                      onSubmitCallback() {
                        const e = new URL(Me).hostname,
                          t = 0 === e.indexOf("www") ? e.substr(3) : e;
                        Le("sm_ef", "/", t),
                          (j = ""),
                          Ct.hideDialog(),
                          Ie && g.navigate("./account/my-account"),
                          g.navigate(i.href);
                      },
                    };
                  s.interactionStarted(D.sH.WELCOME_DIALOG),
                    s.interactionEnded(D.sH.WELCOME_DIALOG),
                    Ct.displayDialog("WelcomeDialog", t, a);
                },
                async showNoPermissionsToPageDialog(t) {
                  if (Pe) {
                    const t = _e[D.$m.NO_PERMISSION];
                    if (t) return void g.navigate(e.routes[t]);
                  }
                  const i = {
                    onCloseDialogCallback() {
                      (0, O.Fy)(Me, d), Ct.hideDialog(), t && t();
                    },
                    onSwitchAccountLinkClick() {
                      Ot.logout();
                    },
                  };
                  Ct.displayDialog(
                    "NoPermissionsToPageDialog",
                    { translations: Ae },
                    i
                  );
                },
                async showResetPasswordDialog(t) {
                  const a = () => {
                    const e = b.getParsedUrl();
                    return (
                      e.searchParams.delete("forgotPasswordToken"),
                      e.searchParams.delete("forgotPasswordLang"),
                      b.pushUrlState(e),
                      e
                    );
                  };
                  if (Pe) {
                    const o = _e[D.$m.RESET_PASSWORD];
                    if (o) {
                      i.update((e) => ({ ...e, resetPasswordToken: t }));
                      const s = a();
                      return (
                        d?.history.replaceState({}, "", s.href),
                        await g.navigate(e.routes[o])
                      );
                    }
                  }
                  const o = {
                      isCloseable: !0,
                      isTermsOfUseNeeded: !(!Xe?.enabled || !Ne.termsOfUse),
                      isPrivacyPolicyNeeded: !(
                        !Qe?.enabled || !Ne.privacyPolicy
                      ),
                      termsOfUseLink: Ne.termsOfUse,
                      privacyPolicyLink: Ne.privacyPolicy,
                      directionByLanguage: u.directionByLanguage,
                      translations: Ae,
                    },
                    s = {
                      onCloseDialogCallback() {
                        (0, O.Fy)(Me, d),
                          pt.closingDialog("ResetPasswordDialog");
                        const e = a();
                        Ct.hideDialog(), g.navigate(e.href);
                      },
                      async onSubmitCallback(i) {
                        try {
                          await Ot.changePassword(i, t),
                            Ot.showNotificationDialog(
                              Ae.resetPasswordSuccessTitle,
                              "",
                              Ae.containerOk,
                              async () => {
                                if (t.startsWith(D.Zq)) {
                                  const e = new URL(Me).searchParams.get(
                                    "redirectUrl"
                                  );
                                  if (e) return d?.location.replace(e);
                                }
                                const e = a();
                                await Ot.showLoginDialog(), g.navigate(e.href);
                              }
                            );
                        } catch (t) {
                          const i = (0, O.E2)(t).toString();
                          if (
                            i !== D.OQ.RESET_PASSWORD_TOKEN_EXPIRED &&
                            i !== D.OQ.NEW_RESET_PASSWORD_TOKEN_EXPIRED
                          )
                            throw t;
                          if (Pe) {
                            const t = _e[D.$m.EXPIRED_TOKEN];
                            if (t) return void (await g.navigate(e.routes[t]));
                          }
                          Ot.showNotificationDialog(
                            Ae.passwordHasExpiredTitle,
                            Ae.passwordHasExpiredText,
                            Ae.passwordHasExpiredOk,
                            () =>
                              Ot.promptForgotPassword(o.isCloseable).then(
                                () => {
                                  const e = b.getParsedUrl();
                                  g.navigate(e.href);
                                }
                              )
                          );
                        }
                      },
                    };
                  Ct.displayDialog("ResetPasswordDialog", o, s, ut());
                },
                async showLoggedInResetPasswordDialog() {
                  const e = {
                      isCloseable: !0,
                      directionByLanguage: u.directionByLanguage,
                      translations: Ae,
                    },
                    t = {
                      onCloseDialogCallback() {
                        pt.closingDialog("LoggedInResetPasswordDialog"),
                          Ct.hideDialog();
                      },
                      async onSubmitCallback() {},
                    };
                  Ct.displayDialog("LoggedInResetPasswordDialog", e, t, ut());
                },
                async showLoginDialog(e = {}, t) {
                  const {
                      returnPages: i,
                      isCloseable: a,
                      displayMode: o,
                    } = {
                      isCloseable: !0,
                      displayMode: "fullscreen",
                      returnPages: !1,
                      ...e,
                    },
                    n = await yt.getCaptchaSettings();
                  return (
                    vt.setCaptchaBadgeVisibility(n.invisible.login),
                    tt && w?.isLightbox(tt)
                      ? Ot.showCustomAuthenticationDialog(tt, i)
                      : new Promise(async (e, r) => {
                          _t.assignRequestAuthenticationPromise(e, r);
                          const c =
                              "Enabled" ===
                                N[
                                  "specs.ShouldForceCaptchaVerificationOnLoginSpec"
                                ] || n.visible.login,
                            [l, g] = (0, y.partition)(
                              await Ot.getConnections(),
                              { appDefId: D.ch.PASSWORD }
                            ),
                            m = await Ot.getLoginUrl(),
                            p = {
                              bsi: At,
                              displayMode: o,
                              language: u.userLanguage,
                              directionByLanguage: u.directionByLanguage,
                              isCloseable: a,
                              smCollectionId: x,
                              svSession: J,
                              biVisitorId: we(),
                              metaSiteId: Oe,
                              isEmailLoginEnabled: l.length > 0,
                              idps: g,
                              shouldForceCaptchaVerification:
                                !n.invisible.login && c,
                              isSocialAuthSupported: We,
                              serverError: t,
                              reportBi: f.reportBi,
                              translations: Ae,
                              externalBaseUrl: Ot.getExternalBaseUrl(),
                              headlessRedirectUrl: m,
                            },
                            S = {
                              onCloseDialogCallback() {
                                (0, O.Fy)(Me, d),
                                  Ct.hideDialog(),
                                  pt.closingDialog("MemberLoginDialog", o),
                                  _t.rejectAuthenticationRequest();
                              },
                              submit(t, a, n) {
                                return (
                                  s.interactionStarted(D.sH.DEFAULT_LOGIN),
                                  pt.emailAuthSubmitClicked(
                                    "MemberLoginDialog",
                                    o
                                  ),
                                  Ot.login(t, a, n, i, void 0, !0)
                                    .then((t) => {
                                      s.interactionEnded(D.sH.DEFAULT_LOGIN),
                                        Ct.hideDialog(),
                                        e(t);
                                    })
                                    .catch((e) => {
                                      throw (
                                        ((0, O.qi)(e) &&
                                          s.interactionEnded(
                                            D.sH.DEFAULT_LOGIN
                                          ),
                                        e)
                                      );
                                    })
                                );
                              },
                              onForgetYourPasswordClick() {
                                Ot.promptForgotPassword(a);
                              },
                              onSwitchDialogLinkClick() {
                                Ot.showSignUpDialog({
                                  isCloseable: a,
                                  displayMode: o,
                                  returnPages: i,
                                }).then(e, () => {
                                  _t.rejectAuthenticationRequest();
                                });
                              },
                              onBackendSocialLogin(t, a) {
                                return Ot.handleSocialLoginResponse(
                                  t,
                                  a,
                                  i
                                ).then((t) => {
                                  Ct.hideDialog(), e(t);
                                });
                              },
                              getHostReadyPayload: () => ({
                                visitorId: we(),
                                svSession: J,
                              }),
                              openCaptcha: (0, h.V1)({
                                captcha: A,
                                userLanguage: u.userLanguage,
                              }),
                              reportSocialAuthStarted: It,
                            };
                          pt.loginOrSignUpDialogLoaded("MemberLoginDialog", o),
                            await Ct.displayDialog(
                              "MemberLoginDialog",
                              p,
                              S,
                              ut()
                            ),
                            Ot.closeCustomAuthenticationDialogs(!0);
                        })
                  );
                },
                async showSignUpDialog(e = {}, t) {
                  const {
                      returnPages: i,
                      isCloseable: a,
                      displayMode: o,
                    } = {
                      isCloseable: !0,
                      displayMode: "fullscreen",
                      returnPages: !1,
                      ...e,
                    },
                    n = await yt.getCaptchaSettings();
                  if (
                    (vt.setCaptchaBadgeVisibility(n.invisible.signup),
                    et && w?.isLightbox(et))
                  )
                    return Ot.showCustomAuthenticationDialog(et, i);
                  const r =
                    "Enabled" !==
                      N["specs.ShouldPassCaptchaVerificationOnSignupSpec"] &&
                    "Enabled" ===
                      N["specs.ShouldForceCaptchaVerificationOnSignupSpec"];
                  return new Promise(async (e, c) => {
                    const l =
                        r ||
                        (n.visible.signup &&
                          "Enabled" !==
                            N[
                              "specs.ShouldPassCaptchaVerificationOnSignupSpec"
                            ]),
                      [g, m] = (0, y.partition)(await Ot.getConnections(), {
                        appDefId: D.ch.PASSWORD,
                      }),
                      p = await Ot.getLoginUrl();
                    _t.assignRequestAuthenticationPromise(e, c);
                    const S = {
                        bsi: At,
                        displayMode: o,
                        language: u.userLanguage,
                        directionByLanguage: u.directionByLanguage,
                        isCloseable: a,
                        smCollectionId: x,
                        biVisitorId: we(),
                        svSession: J,
                        metaSiteId: Oe,
                        isSocialAuthSupported: We,
                        isEmailLoginEnabled: g.length > 0,
                        idps: m,
                        isCommunityInstalled: await ft.canHavePublicMembers(),
                        privacyNoteType: it,
                        joinCommunityCheckedByDefault: at,
                        isTermsOfUseNeeded: !(!Xe?.enabled || !Ne.termsOfUse),
                        isPrivacyPolicyNeeded: !(
                          !Qe?.enabled || !Ne.privacyPolicy
                        ),
                        isCodeOfConductNeeded: !(
                          !Ze?.enabled || !Ne.codeOfConduct
                        ),
                        shouldForceCaptchaVerification:
                          !n.invisible.signup && l,
                        termsOfUseLink: Ne.termsOfUse,
                        privacyPolicyLink: Ne.privacyPolicy,
                        codeOfConductLink: Ne.codeOfConduct,
                        serverError: t,
                        reportBi: f.reportBi,
                        translations: Ae,
                        externalBaseUrl: Ot.getExternalBaseUrl(),
                        headlessRedirectUrl: p,
                      },
                      b = {
                        onCloseDialogCallback() {
                          (0, O.Fy)(Me, d),
                            Ct.hideDialog(),
                            pt.closingDialog("SignUpDialog", o),
                            _t.rejectAuthenticationRequest();
                        },
                        async submit(t, a, n) {
                          let r;
                          if (S.isCommunityInstalled) {
                            r = (
                              "boolean" == typeof n ? n : n.isCommunityChecked
                            )
                              ? Ce.lS.PUBLIC
                              : Ce.lS.PRIVATE;
                          }
                          const c =
                            "boolean" == typeof n ? void 0 : n?.recaptchaToken;
                          return (
                            s.interactionStarted(D.sH.DEFAULT_SIGNUP),
                            pt.emailAuthSubmitClicked("SignUpDialog", o),
                            Ot.register(t, a, void 0, r, !0, i, c, void 0)
                              .then((t) => {
                                s.interactionEnded(D.sH.DEFAULT_SIGNUP);
                                const {
                                  member: a,
                                  sessionToken: o,
                                  pages: n,
                                } = t;
                                o &&
                                  (Ct.hideDialog(!0),
                                  e({
                                    member: a,
                                    sessionToken: o,
                                    ...(i ? { pages: n } : {}),
                                  }));
                              })
                              .catch((e) => {
                                throw (
                                  ((0, O.NU)(e) &&
                                    s.interactionEnded(D.sH.DEFAULT_SIGNUP),
                                  e)
                                );
                              })
                          );
                        },
                        onSwitchDialogLinkClick() {
                          Ot.showLoginDialog({
                            isCloseable: a,
                            displayMode: o,
                            returnPages: i,
                          }).then(e, () => {
                            _t.rejectAuthenticationRequest();
                          });
                        },
                        onBackendSocialLogin(t, a) {
                          return Ot.handleSocialLoginResponse(t, a, i).then(
                            (t) => {
                              Ct.hideDialog(), e(t);
                            }
                          );
                        },
                        getHostReadyPayload: () => ({
                          visitorId: we(),
                          svSession: J,
                        }),
                        openCaptcha: (0, h.V1)({
                          captcha: A,
                          userLanguage: u.userLanguage,
                        }),
                        reportSocialAuthStarted: It,
                      };
                    pt.loginOrSignUpDialogLoaded("SignUpDialog", o),
                      await Ct.displayDialog("SignUpDialog", S, b, ut()),
                      Ot.closeCustomAuthenticationDialogs(!0);
                  });
                },
                async hideAuthDialog() {
                  console.warn("hideAuthDialog is not supported");
                },
                async showNotificationDialog(
                  e,
                  t,
                  i,
                  a = () => 0,
                  o = () => 0
                ) {
                  const s = {
                      isCloseable: !0,
                      title: e,
                      description: t,
                      okButtonText: i,
                      translations: Ae,
                    },
                    n = {
                      onCloseDialogCallback() {
                        (0, O.Fy)(Me, d),
                          pt.closingDialog("NotificationDialog"),
                          Ct.hideDialog(),
                          o();
                      },
                      onOkButtonClick() {
                        Ct.hideDialog(), a();
                      },
                    };
                  await Ct.displayDialog("NotificationDialog", s, n);
                },
                async showConfirmationEmailDialog(e, t = !0) {
                  return new Promise((i, a) => {
                    const o = {
                        isCloseable: !0,
                        isSignUp: t,
                        translations: Ae,
                      },
                      s = {
                        onCloseDialogCallback() {
                          (0, O.Fy)(Me, d),
                            pt.closingDialog("ConfirmationEmailDialog"),
                            Ct.hideDialog(),
                            _t.rejectAuthenticationRequest(),
                            a(D.qd.CANCELED);
                        },
                        async onResendConfirmationEmail() {
                          await Ot.resendEmailVerification(e),
                            await Ot.showConfirmationEmailDialog(e, !1).catch(
                              a
                            );
                        },
                      };
                    Ct.displayDialog("ConfirmationEmailDialog", o, s);
                  });
                },
                async showAdminApprovalDialog(e) {
                  return new Promise((t, i) => {
                    const a = () => {
                      (0, O._y)(d, Me, { error: O.Mi.ACCESS_DENIED }),
                        _t.rejectAuthenticationRequest(),
                        i(D.qd.CANCELED),
                        Ot.closeCustomAuthenticationDialogs(!1);
                    };
                    Ot.showNotificationDialog(
                      "",
                      `${Ae.applySuccess1} ${Ae.applySuccess2}`.replace(
                        "{0}",
                        e
                      ),
                      Ae.containerOk,
                      a,
                      a
                    );
                  });
                },
                async showCustomAuthenticationDialog(e, t = !1) {
                  if (!w) throw new Error("popup unavailable");
                  return new Promise(async (i, a) => {
                    _t.assignRequestAuthenticationPromise(i, a);
                    const o = Ot.registerToUserLogin(async () => {
                      _t.resolveAuthenticationRequest({
                        member: st,
                        sessionToken: nt,
                        ...(t
                          ? {
                              pages:
                                await Ot.authorizeMemberPagesBySignedInstance(
                                  Y()
                                ),
                            }
                          : {}),
                      }),
                        Ot.unRegisterToUserLogin(o),
                        w.getCurrentLightboxId() === e && w.close();
                    }, "customAuthCbId");
                    await _t.openPopupPage(e, () => {
                      Ot.unRegisterToUserLogin(o);
                    }),
                      Ct.hideDialog();
                  });
                },
                async closeCustomAuthenticationDialogs(e = !1) {
                  const t = w?.getCurrentLightboxId();
                  t &&
                    [et, tt].includes(t) &&
                    (e && _t.preventCustomPopupCloseCallback(),
                    await w.close(),
                    _t.allowCustomPopupCloseCallback());
                },
                getForgotPasswordToken() {
                  return new URL(
                    (0, p.fU)(d) ? Me : d.location.href
                  ).searchParams.get("forgotPasswordToken");
                },
                shouldDisplayWelcomeDialog() {
                  return j && Ie;
                },
                async verifyEmailOTP(e) {
                  try {
                    const t = i.get().emailConfirmationStateToken,
                      a = await bt.request(Re({ stateToken: t, code: e }), {
                        signedInstance: Y(),
                      });
                    i.update((e) => ({
                      ...e,
                      emailConfirmationResponse: a?.data,
                    }));
                  } catch (e) {
                    throw (0, O.E2)(e.response?.data);
                  }
                },
                async resendVerificationCodeEmail() {
                  pt.siteMembersEmailConfirmationOnResendCodeClick();
                  const e = i.get().emailConfirmationStateToken,
                    t = await St(`${Ke}/v1/proceed`, {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/json",
                        authorization: Y(),
                      },
                      body: JSON.stringify({ stateToken: e }),
                    });
                  i.update((e) => ({
                    ...e,
                    emailConfirmationStateToken: t.stateToken,
                  }));
                },
                async showVerificationCodeDialog(e, t = !0) {
                  return new Promise(async (i, a) => {
                    s.interactionStarted(D.sH.VERIFICATION_CODE),
                      pt.siteMembersEmailConfirmationNewMembersModalLoad(),
                      _t.assignRequestAuthenticationPromise(i, a);
                    const o = {
                        language: u.userLanguage,
                        directionByLanguage: u.directionByLanguage,
                        isCloseable: _t.config?.isCloseable ?? !0,
                        displayMode: "customPopup",
                        email: e?.email,
                        error: e?.error,
                        translations: Ae,
                        isAuthV2Enabled: !0,
                        stateToken: e?.stateToken,
                        isVerificationCodeDialogNewLogic:
                          N["specs.thunderbolt.verificationCodeDialogNewLogic"],
                      },
                      n = {
                        async onResendVerificationCodeEmail() {
                          pt.siteMembersEmailConfirmationOnResendCodeClick(),
                            await St(`${Ke}/v1/proceed`, {
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                                authorization: Y(),
                              },
                              body: JSON.stringify({
                                stateToken: e.stateToken,
                              }),
                            });
                        },
                        onCloseDialogCallback() {
                          pt.closingDialog("VerificationCode"),
                            (0, O.Fy)(Me, d),
                            Ct.hideDialog(),
                            _t.rejectAuthenticationRequest(),
                            a(D.qd.CANCELED);
                        },
                        async onSubmitCallback(t) {
                          pt.siteMembersEmailConfirmationSendCodeClick();
                          if (
                            N[
                              "specs.thunderbolt.verificationCodeDialogNewLogic"
                            ]
                          )
                            try {
                              const i = {
                                  stateToken: e.stateToken || "",
                                  code: t,
                                },
                                a = await bt.request(Re(i), {
                                  signedInstance: Y(),
                                });
                              return a?.data;
                            } catch (e) {
                              const t = (0, O.E2)(e.response?.data);
                              if (t === D.qd.CANCELED) return a(t);
                              throw t;
                            }
                          i(t);
                        },
                        onSuccessCallback: (e) => {
                          Ct.hideDialog(), i(e);
                        },
                      };
                    s.interactionEnded(D.sH.VERIFICATION_CODE),
                      Ct.displayDialog(
                        "VerificationCodeDialog",
                        o,
                        n,
                        void 0,
                        t
                      );
                  });
                },
                async appWillMount() {
                  U && (await Ot.getMemberDetails());
                  switch (
                    new URL(n.requestUrl).searchParams.get("showDialog")
                  ) {
                    case "MemberLoginDialog":
                      Ot.showLoginDialog();
                      break;
                    case "SignUpDialog":
                      Ot.showSignUpDialog();
                      break;
                    case "RequestPasswordResetDialog":
                      Ot.promptForgotPassword();
                      break;
                    case "ResetPasswordDialog":
                      Ot.showResetPasswordDialog("faketoken");
                      break;
                    case "LoggedInResetPasswordDialog":
                      Ot.showLoggedInResetPasswordDialog();
                      break;
                    case "WelcomeDialog":
                      Ot.showWelcomeDialog();
                      break;
                    case "NoPermissionsToPageDialog":
                      Ot.showNoPermissionsToPageDialog();
                      break;
                    case "NotificationDialog":
                      Ot.showNotificationDialog("title", "description", "ok");
                      break;
                    case "ConfirmationEmailDialog":
                      Ot.showConfirmationEmailDialog("fakemember");
                      break;
                    case "VerificationCodeDialog":
                      Ot.showVerificationCodeDialog({
                        email: "testEmail@test.com",
                      });
                      break;
                    case "ExpiredResetPasswordDialog":
                      Ot.showNotificationDialog(
                        Ae.passwordHasExpiredTitle,
                        Ae.passwordHasExpiredText,
                        Ae.passwordHasExpiredOk,
                        () =>
                          Ot.promptForgotPassword(!1).then(() => {
                            const e = b.getParsedUrl();
                            g.navigate(e.href);
                          })
                      );
                  }
                },
                pageWillUnmount({ pageId: e }) {
                  [et, tt].includes(e) || Ct.hideDialog();
                },
                getSocialAuthComponentProps() {
                  return (0, O._G)({
                    config: e,
                    viewerModel: n,
                    sessionManager: r,
                    bsiManager: R,
                    handleSocialLoginResponse: Ot.handleSocialLoginResponse,
                    isSocialAuthSupported: xe,
                    captcha: A,
                    userLanguage: u.userLanguage,
                    reportBi: f.reportBi,
                    reportSocialAuthStarted: It,
                    useNewSocialFlow: !0,
                    translations: Ae,
                  });
                },
                async getConnections() {
                  const e = {
                    [D.ch.FACEBOOK]: !0,
                    [D.ch.GOOGLE]: !0,
                    [D.ch.APPLE]: !1,
                  };
                  return yt
                    .getEnabledConnections(e)
                    .then((e) =>
                      e.map(({ id: e, appDefId: t, displayName: i }) => ({
                        id: e,
                        appDefId: t,
                        name: i,
                      }))
                    );
                },
                getLoginUrl() {
                  if (
                    Pt &&
                    N["specs.thunderbolt.shouldFetchLoginUrlByClientId"]
                  )
                    return yt.getLoginRedirectUrl();
                },
                getLogoutUrl() {
                  if (Pt) return yt.getLogoutRedirectUrl();
                },
                getExternalBaseUrl() {
                  return N["specs.thunderbolt.shouldUseExternalBaseUrl"]
                    ? Te
                    : void 0;
                },
                async register(e, t, i, a, o, n, r, c) {
                  n = n ?? !1;
                  try {
                    const l = await yt.getCaptchaSettings();
                    if (
                      l.visible.signup &&
                      "Enabled" !==
                        N["specs.ShouldPassCaptchaVerificationOnSignupSpec"] &&
                      !r &&
                      !c?.otp &&
                      !c?.verificationId
                    )
                      throw D.pH;
                    s.interactionStarted(D.sH.CODE_SIGNUP),
                      E.trackEvent((0, D.SU)(D.WW.ACTIONS.SIGNUP.SUBMIT));
                    const u = w?.getCurrentLightboxId(),
                      g = v.getCurrentRouteInfo()?.pageId,
                      m = o || (et && u && et === u) || (et && g && et === g),
                      p =
                        l.invisible.signup && m
                          ? await Dt(D.MA.SIGNUP)
                          : void 0,
                      h = N["specs.thunderbolt.convertBirthdateToISOString"],
                      S = {
                        profile: {
                          ...(0, O.y0)(i || {}, h),
                          privacyStatus: a,
                          emails: [e],
                        },
                        loginId: { email: e },
                        password: t,
                        captchaTokens: [
                          ...(r ? [{ Recaptcha: r }] : []),
                          ...(p ? [{ InvisibleRecaptcha: p }] : []),
                        ],
                      },
                      b = await bt
                        .request(
                          (function (e) {
                            var t = (0, G.d)(me, {
                                _customField: oe,
                                _customValue: se,
                                _identityProfile: re,
                                _listValue: ce,
                                _mapValue: de,
                              }),
                              i = t.toJSON,
                              a = t.fromJSON,
                              o = (0, G.d)(pe, {
                                _commonCustomValue: te,
                                _commonListValue: ie,
                                _commonMapValue: ae,
                                _customField: oe,
                                _customValue: se,
                                _identity: ne,
                                _identityProfile: re,
                                _listValue: ce,
                                _mapValue: de,
                              }).fromJSON;
                            function s(t) {
                              var a = t.host,
                                s = i(e);
                              return {
                                entityFqdn:
                                  "wix.iam.authentication.v1.authentication",
                                method: "POST",
                                methodFqn:
                                  "wix.iam.authentication.v1.AuthenticationService.RegisterV2",
                                url: he({
                                  protoPath: "/v2/register",
                                  data: s,
                                  host: a,
                                }),
                                data: s,
                                transformResponse: o,
                              };
                            }
                            return (s.fromReq = a), (s.__isAmbassador = !0), s;
                          })(S),
                          { signedInstance: Y() }
                        )
                        .then((e) => e.data)
                        .catch((e) => {
                          throw e.response?.data ?? e;
                        });
                    s.interactionEnded(D.sH.CODE_SIGNUP);
                    const f = await Ot.getStateMachine(b, e),
                      C = f?.additionalData?.protectedPages,
                      P = (0, O.FB)(C),
                      y = (0, O.$e)(f);
                    if (
                      (0, O._y)(d, Me, { sessionToken: f?.sessionToken }) &&
                      N["specs.thunderbolt.useNewPostLoginRedirect"]
                    )
                      return (0, O.yw)();
                    const _ = await Ot.applySessionToken(
                        f?.sessionToken,
                        y,
                        n && !P
                      ),
                      A = P ?? _;
                    E.trackEvent((0, D.SU)(D.WW.ACTIONS.SIGNUP.SUCCESS)),
                      E.trackEvent({
                        eventName: "CompleteRegistration",
                        params: { origin: "Site members", method: "Wix" },
                      });
                    const I = f?.sessionToken;
                    return {
                      member: y,
                      status: y.status,
                      sessionToken: I,
                      ...(n && A ? { pages: A } : {}),
                    };
                  } catch (e) {
                    throw (
                      ((0, O.NU)(e)
                        ? s.interactionEnded(D.sH.CODE_SIGNUP)
                        : E.trackEvent((0, D.SU)(D.WW.ACTIONS.SIGNUP.FAIL)),
                      e)
                    );
                  }
                },
                async getStateMachine(t, a) {
                  const o = t?.state;
                  if (o === Ce.Gd.REQUIRE_OWNER_APPROVAL) {
                    if (Pe) {
                      const t = _e[D.$m.ADMIN_APPROVAL];
                      if (t)
                        throw (
                          (_t.rejectAuthenticationRequest(),
                          await g.navigate(e.routes[t]),
                          new Error(D.qd.CANCELED))
                        );
                    }
                    return Ot.showAdminApprovalDialog(a);
                  }
                  if (o === Ce.Gd.REQUIRE_EMAIL_VERIFICATION) {
                    if (Pe) {
                      const e = _e[D.$m.EMAIL_CONFIRMATION];
                      if (e) {
                        const o = await new Promise((a) => {
                          i.update((e) => ({
                            ...e,
                            emailConfirmationStateToken: t?.stateToken ?? "",
                          }));
                          w?.open(e, () => {
                            const e = i.get().emailConfirmationResponse;
                            a(e);
                          });
                        });
                        return this.getStateMachine(o, a);
                      }
                    }
                    const e =
                        N["specs.thunderbolt.verificationCodeDialogNewLogic"],
                      o = t?.stateToken ?? "";
                    if (e) {
                      const e = await Ot.showVerificationCodeDialog({
                        email: a,
                        stateToken: o,
                      });
                      return Ot.getStateMachine(e, a);
                    }
                    return Ot.verifyEmail(a, t?.stateToken).then(
                      (e) => (Ct.hideDialog(), Ot.getStateMachine(e, a))
                    );
                  }
                  return t;
                },
                async verifyEmail(e, t, i, a, o) {
                  try {
                    const s = {
                      stateToken: t || "",
                      code:
                        o ??
                        (await Ot.showVerificationCodeDialog(
                          { email: e, stateToken: t, error: a },
                          !i
                        )),
                    };
                    return (await bt.request(Re(s), { signedInstance: Y() }))
                      .data;
                  } catch (i) {
                    if (i === D.qd.CANCELED) throw i;
                    const a = i?.details?.applicationError?.code ?? "BAD_CODE";
                    return Ot.verifyEmail(e, t, !0, a);
                  }
                },
                async login(e, t, i, a = !1, o, s = !1) {
                  try {
                    const n = await yt.getCaptchaSettings();
                    if (
                      n.visible.login &&
                      !i?.recaptchaToken &&
                      !o?.otp &&
                      !o?.verificationId
                    )
                      throw D.pH;
                    E.trackEvent((0, D.SU)(D.WW.ACTIONS.LOGIN.SUBMIT));
                    const r = w?.getCurrentLightboxId(),
                      c = v.getCurrentRouteInfo()?.pageId,
                      l = s || (tt && r && tt === r) || (tt && c && tt === c),
                      u =
                        n.invisible.login && l ? await Dt(D.MA.LOGIN) : void 0,
                      g = [];
                    i?.recaptchaToken &&
                      g.push({ Recaptcha: i?.recaptchaToken }),
                      u && g.push({ InvisibleRecaptcha: u });
                    const m = {
                        loginId: { email: e },
                        password: t,
                        captchaTokens: g,
                      },
                      p = await bt
                        .request(
                          (function (e) {
                            var t = (0, G.d)(le, {}),
                              i = t.toJSON,
                              a = t.fromJSON,
                              o = (0, G.d)(pe, {
                                _commonCustomValue: te,
                                _commonListValue: ie,
                                _commonMapValue: ae,
                                _customField: oe,
                                _customValue: se,
                                _identity: ne,
                                _identityProfile: re,
                                _listValue: ce,
                                _mapValue: de,
                              }).fromJSON;
                            function s(t) {
                              var a = t.host,
                                s = i(e);
                              return {
                                entityFqdn:
                                  "wix.iam.authentication.v1.authentication",
                                method: "POST",
                                methodFqn:
                                  "wix.iam.authentication.v1.AuthenticationService.LoginV2",
                                url: he({
                                  protoPath: "/v2/login",
                                  data: s,
                                  host: a,
                                }),
                                data: s,
                                transformResponse: o,
                              };
                            }
                            return (s.fromReq = a), (s.__isAmbassador = !0), s;
                          })(m),
                          { signedInstance: Y() }
                        )
                        .then((e) => e.data)
                        .catch((e) => {
                          throw e.response?.data ?? e;
                        }),
                      h = await Ot.getStateMachine(p, e),
                      S = h?.additionalData?.protectedPages,
                      b = (0, O.FB)(S),
                      f = (0, O.$e)(h);
                    if (
                      (0, O._y)(d, Me, { sessionToken: h?.sessionToken }) &&
                      N["specs.thunderbolt.useNewPostLoginRedirect"]
                    )
                      return (0, O.yw)();
                    const C = await Ot.applySessionToken(
                        h?.sessionToken,
                        f,
                        a && !b
                      ),
                      P = b ?? C,
                      y = h?.sessionToken;
                    return {
                      sessionToken: y,
                      member: f,
                      ...(a ? { pages: P } : {}),
                    };
                  } catch (t) {
                    throw (
                      ((0, O.qi)(t) ||
                        E.trackEvent({
                          eventName: "CustomEvent",
                          params: {
                            eventCategory: "Site members",
                            eventAction: "Log in Failure",
                            eventLabel: "Wix",
                          },
                        }),
                      t?.details?.applicationError?.code ===
                        D.OQ.WAITING_APPROVAL && Ot.showAdminApprovalDialog(e),
                      t?.response?.data ?? t)
                    );
                  }
                },
              };
            return (
              a.export({
                promptLogin: Ot.promptLogin,
                logout: Ot.logout,
                memberDetails: st,
              }),
              i.update((e) => ({
                ...e,
                shouldShowRenderingBlockingDialogs: (e) =>
                  e.relativeUrl !== D.m5 &&
                  !(
                    !Ot.getForgotPasswordToken() &&
                    !Ot.shouldDisplayWelcomeDialog()
                  ),
                showRenderingBlockingDialogs: () => {
                  const e = Ot.getForgotPasswordToken();
                  return e
                    ? Ot.showResetPasswordDialog(e)
                    : Ot.shouldDisplayWelcomeDialog()
                    ? Ot.showWelcomeDialog()
                    : void 0;
                },
              })),
              Ot
            );
          }
        );
      var Ue = i(16537),
        Me = i(60950),
        Ve = i(17840);
      const Be = (0, a.Og)([v.Np], (e) => ({
          getTpaHandlers() {
            const t = async (t, i, a) => {
                const o = await e.getMemberDetails(!0);
                return o
                  ? a.appClientSpecMapData?.isWixTPA
                    ? {
                        attributes: {
                          firstName: o.firstName ?? "",
                          lastName: o.lastName ?? "",
                          privacyStatus: o.profilePrivacyStatus,
                        },
                        name: o.memberName,
                        email: o.loginEmail,
                        id: o.id,
                        owner: o.owner,
                        status: o.status,
                      }
                    : { id: o.id, owner: o.owner, status: o.status }
                  : null;
              },
              i = async (t, i = {}) => {
                const { member: a } = await e.promptLogin({
                  mode: i.mode,
                  modal: i.modal,
                });
                return {
                  attributes: {
                    firstName: a.firstName ?? "",
                    lastName: a.lastName ?? "",
                    privacyStatus: a.profilePrivacyStatus,
                  },
                  name: a.memberName,
                  email: a.loginEmail,
                  id: a.id,
                  owner: a.owner,
                  status: a.status,
                };
              };
            return {
              currentMember: t,
              smCurrentMember: t,
              logOutCurrentMember: (0, Ve.V)(["site"], (t, i) => {
                e.logout(i?.url);
              }),
              requestLogin: (0, Ve.V)(["site"], i),
              smRequestLogin: (0, Ve.V)(["site"], i),
            };
          },
        })),
        Fe = (0, a.Og)(
          [v.Np, (0, a.KT)(o.Gp, v.UU), r.Ji],
          (e, { componentIds: t }, i) => ({
            name: "site-members-components",
            pageWillMount() {
              const a = t.reduce(
                (t, i) => ({ ...t, [i]: e.getSocialAuthComponentProps() }),
                {}
              );
              i.update(a);
            },
          })
        ),
        qe = (0, a.Og)([(0, a.KT)(o.wk, v.UU)], (e) => ({
          handle: async (t) => {
            const {
              shouldShowRenderingBlockingDialogs: i,
              showRenderingBlockingDialogs: a,
            } = e.get();
            return i(t) ? (a(), null) : t;
          },
        })),
        We = (e) => {
          e(v.Np, Ue.$.AppWillMountHandler, Ue.$.AppDidMountHandler).to(ke),
            e(b.po.BlockingDialogs).to(qe);
        },
        xe = (e) => {
          e(Me.dQ).to(Be),
            e(Ue.$.PageWillMountHandler).to(Fe),
            e(Ue.$.PageWillUnmountHandler).to(
              (0, a.Og)([v.Np], (e) => ({
                pageWillUnmount(t) {
                  return e.pageWillUnmount(t);
                },
              }))
            );
        };
    },
  },
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_9.fb33cdb9.chunk.min.js.map
